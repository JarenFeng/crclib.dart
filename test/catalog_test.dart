// Generated by gen_catalog.dart.
//
// Copyright 2020 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import 'dart:convert';

import 'package:test/test.dart';

import 'package:crclib/catalog.dart';
import 'package:crclib/src/primitive.dart' show CrcValue;

void main() {
  final input = utf8.encode('123456789');
  test('Crc8Autosar', () {
    expect(Crc8Autosar().convert(input),
           CrcValue(8, BigInt.parse('df', radix:16)));
  });
  test('Crc8Bluetooth', () {
    expect(Crc8Bluetooth().convert(input),
           CrcValue(8, BigInt.parse('26', radix:16)));
  });
  test('Crc8Cdma2000', () {
    expect(Crc8Cdma2000().convert(input),
           CrcValue(8, BigInt.parse('da', radix:16)));
  });
  test('Crc8Darc', () {
    expect(Crc8Darc().convert(input),
           CrcValue(8, BigInt.parse('15', radix:16)));
  });
  test('Crc8DvbS2', () {
    expect(Crc8DvbS2().convert(input),
           CrcValue(8, BigInt.parse('bc', radix:16)));
  });
  test('Crc8GsmA', () {
    expect(Crc8GsmA().convert(input),
           CrcValue(8, BigInt.parse('37', radix:16)));
  });
  test('Crc8GsmB', () {
    expect(Crc8GsmB().convert(input),
           CrcValue(8, BigInt.parse('94', radix:16)));
  });
  test('Crc8I4321', () {
    expect(Crc8I4321().convert(input),
           CrcValue(8, BigInt.parse('a1', radix:16)));
    expect(Crc8Itu().convert(input),
           CrcValue(8, BigInt.parse('a1', radix:16)));
  });
  test('Crc8ICode', () {
    expect(Crc8ICode().convert(input),
           CrcValue(8, BigInt.parse('7e', radix:16)));
  });
  test('Crc8Lte', () {
    expect(Crc8Lte().convert(input),
           CrcValue(8, BigInt.parse('ea', radix:16)));
  });
  test('Crc8MaximDow', () {
    expect(Crc8MaximDow().convert(input),
           CrcValue(8, BigInt.parse('a1', radix:16)));
    expect(Crc8Maxim().convert(input),
           CrcValue(8, BigInt.parse('a1', radix:16)));
    expect(Crc8Dow().convert(input),
           CrcValue(8, BigInt.parse('a1', radix:16)));
  });
  test('Crc8MifareMad', () {
    expect(Crc8MifareMad().convert(input),
           CrcValue(8, BigInt.parse('99', radix:16)));
  });
  test('Crc8Nrsc5', () {
    expect(Crc8Nrsc5().convert(input),
           CrcValue(8, BigInt.parse('f7', radix:16)));
  });
  test('Crc8OpenSafety', () {
    expect(Crc8OpenSafety().convert(input),
           CrcValue(8, BigInt.parse('3e', radix:16)));
  });
  test('Crc8Rohc', () {
    expect(Crc8Rohc().convert(input),
           CrcValue(8, BigInt.parse('d0', radix:16)));
  });
  test('Crc8SaeJ1850', () {
    expect(Crc8SaeJ1850().convert(input),
           CrcValue(8, BigInt.parse('4b', radix:16)));
  });
  test('Crc8SMBus', () {
    expect(Crc8SMBus().convert(input),
           CrcValue(8, BigInt.parse('f4', radix:16)));
    expect(Crc8().convert(input),
           CrcValue(8, BigInt.parse('f4', radix:16)));
  });
  test('Crc8Tech3250', () {
    expect(Crc8Tech3250().convert(input),
           CrcValue(8, BigInt.parse('97', radix:16)));
    expect(Crc8Aes().convert(input),
           CrcValue(8, BigInt.parse('97', radix:16)));
    expect(Crc8Ebu().convert(input),
           CrcValue(8, BigInt.parse('97', radix:16)));
  });
  test('Crc8Wcdma', () {
    expect(Crc8Wcdma().convert(input),
           CrcValue(8, BigInt.parse('25', radix:16)));
  });
  test('Crc16Arc', () {
    expect(Crc16Arc().convert(input),
           CrcValue(16, BigInt.parse('bb3d', radix:16)));
    expect(Crc16().convert(input),
           CrcValue(16, BigInt.parse('bb3d', radix:16)));
    expect(Crc16Lha().convert(input),
           CrcValue(16, BigInt.parse('bb3d', radix:16)));
    expect(Crc16Ibm().convert(input),
           CrcValue(16, BigInt.parse('bb3d', radix:16)));
  });
  test('Crc16Cdma2000', () {
    expect(Crc16Cdma2000().convert(input),
           CrcValue(16, BigInt.parse('4c06', radix:16)));
  });
  test('Crc16Cms', () {
    expect(Crc16Cms().convert(input),
           CrcValue(16, BigInt.parse('aee7', radix:16)));
  });
  test('Crc16Dds110', () {
    expect(Crc16Dds110().convert(input),
           CrcValue(16, BigInt.parse('9ecf', radix:16)));
  });
  test('Crc16DectR', () {
    expect(Crc16DectR().convert(input),
           CrcValue(16, BigInt.parse('7e', radix:16)));
    expect(Crc16R().convert(input),
           CrcValue(16, BigInt.parse('7e', radix:16)));
  });
  test('Crc16DectX', () {
    expect(Crc16DectX().convert(input),
           CrcValue(16, BigInt.parse('7f', radix:16)));
    expect(Crc16X().convert(input),
           CrcValue(16, BigInt.parse('7f', radix:16)));
  });
  test('Crc16Dnp', () {
    expect(Crc16Dnp().convert(input),
           CrcValue(16, BigInt.parse('ea82', radix:16)));
  });
  test('Crc16En13757', () {
    expect(Crc16En13757().convert(input),
           CrcValue(16, BigInt.parse('c2b7', radix:16)));
  });
  test('Crc16GeniBus', () {
    expect(Crc16GeniBus().convert(input),
           CrcValue(16, BigInt.parse('d64e', radix:16)));
    expect(Crc16Darc().convert(input),
           CrcValue(16, BigInt.parse('d64e', radix:16)));
    expect(Crc16Epc().convert(input),
           CrcValue(16, BigInt.parse('d64e', radix:16)));
    expect(Crc16EpcC1g2().convert(input),
           CrcValue(16, BigInt.parse('d64e', radix:16)));
    expect(Crc16ICode().convert(input),
           CrcValue(16, BigInt.parse('d64e', radix:16)));
  });
  test('Crc16Gsm', () {
    expect(Crc16Gsm().convert(input),
           CrcValue(16, BigInt.parse('ce3c', radix:16)));
  });
  test('Crc16Ibm3740', () {
    expect(Crc16Ibm3740().convert(input),
           CrcValue(16, BigInt.parse('29b1', radix:16)));
    expect(Crc16Autosar().convert(input),
           CrcValue(16, BigInt.parse('29b1', radix:16)));
    expect(Crc16CcittFalse().convert(input),
           CrcValue(16, BigInt.parse('29b1', radix:16)));
  });
  test('Crc16IbmSdlc', () {
    expect(Crc16IbmSdlc().convert(input),
           CrcValue(16, BigInt.parse('906e', radix:16)));
    expect(Crc16IsoHdlc().convert(input),
           CrcValue(16, BigInt.parse('906e', radix:16)));
    expect(Crc16IsoIec144433B().convert(input),
           CrcValue(16, BigInt.parse('906e', radix:16)));
    expect(Crc16X25().convert(input),
           CrcValue(16, BigInt.parse('906e', radix:16)));
    expect(Crc16B().convert(input),
           CrcValue(16, BigInt.parse('906e', radix:16)));
  });
  test('Crc16IsoIec144433A', () {
    expect(Crc16IsoIec144433A().convert(input),
           CrcValue(16, BigInt.parse('bf05', radix:16)));
    expect(Crc16A().convert(input),
           CrcValue(16, BigInt.parse('bf05', radix:16)));
  });
  test('Crc16Kermit', () {
    expect(Crc16Kermit().convert(input),
           CrcValue(16, BigInt.parse('2189', radix:16)));
    expect(Crc16Ccitt().convert(input),
           CrcValue(16, BigInt.parse('2189', radix:16)));
    expect(Crc16CcittTrue().convert(input),
           CrcValue(16, BigInt.parse('2189', radix:16)));
    expect(Crc16V41Lsb().convert(input),
           CrcValue(16, BigInt.parse('2189', radix:16)));
  });
  test('Crc16LJ1200', () {
    expect(Crc16LJ1200().convert(input),
           CrcValue(16, BigInt.parse('bdf4', radix:16)));
  });
  test('Crc16MaximDow', () {
    expect(Crc16MaximDow().convert(input),
           CrcValue(16, BigInt.parse('44c2', radix:16)));
    expect(Crc16Maxim().convert(input),
           CrcValue(16, BigInt.parse('44c2', radix:16)));
  });
  test('Crc16Mcrf4xx', () {
    expect(Crc16Mcrf4xx().convert(input),
           CrcValue(16, BigInt.parse('6f91', radix:16)));
  });
  test('Crc16Modbus', () {
    expect(Crc16Modbus().convert(input),
           CrcValue(16, BigInt.parse('4b37', radix:16)));
  });
  test('Crc16Nrsc5', () {
    expect(Crc16Nrsc5().convert(input),
           CrcValue(16, BigInt.parse('a066', radix:16)));
  });
  test('Crc16OpenSafetyA', () {
    expect(Crc16OpenSafetyA().convert(input),
           CrcValue(16, BigInt.parse('5d38', radix:16)));
  });
  test('Crc16OpenSafetyB', () {
    expect(Crc16OpenSafetyB().convert(input),
           CrcValue(16, BigInt.parse('20fe', radix:16)));
  });
  test('Crc16Profibus', () {
    expect(Crc16Profibus().convert(input),
           CrcValue(16, BigInt.parse('a819', radix:16)));
    expect(Crc16Iec611582().convert(input),
           CrcValue(16, BigInt.parse('a819', radix:16)));
  });
  test('Crc16Riello', () {
    expect(Crc16Riello().convert(input),
           CrcValue(16, BigInt.parse('63d0', radix:16)));
  });
  test('Crc16SpiFujitsu', () {
    expect(Crc16SpiFujitsu().convert(input),
           CrcValue(16, BigInt.parse('e5cc', radix:16)));
    expect(Crc16AugCcitt().convert(input),
           CrcValue(16, BigInt.parse('e5cc', radix:16)));
  });
  test('Crc16T10Dif', () {
    expect(Crc16T10Dif().convert(input),
           CrcValue(16, BigInt.parse('d0db', radix:16)));
  });
  test('Crc16Teledisk', () {
    expect(Crc16Teledisk().convert(input),
           CrcValue(16, BigInt.parse('fb3', radix:16)));
  });
  test('Crc16Tms37157', () {
    expect(Crc16Tms37157().convert(input),
           CrcValue(16, BigInt.parse('26b1', radix:16)));
  });
  test('Crc16Umts', () {
    expect(Crc16Umts().convert(input),
           CrcValue(16, BigInt.parse('fee8', radix:16)));
    expect(Crc16Buypass().convert(input),
           CrcValue(16, BigInt.parse('fee8', radix:16)));
    expect(Crc16Verifone().convert(input),
           CrcValue(16, BigInt.parse('fee8', radix:16)));
  });
  test('Crc16Usb', () {
    expect(Crc16Usb().convert(input),
           CrcValue(16, BigInt.parse('b4c8', radix:16)));
  });
  test('Crc16Xmodem', () {
    expect(Crc16Xmodem().convert(input),
           CrcValue(16, BigInt.parse('31c3', radix:16)));
    expect(Crc16Acorn().convert(input),
           CrcValue(16, BigInt.parse('31c3', radix:16)));
    expect(Crc16Lte().convert(input),
           CrcValue(16, BigInt.parse('31c3', radix:16)));
    expect(Crc16V41Msb().convert(input),
           CrcValue(16, BigInt.parse('31c3', radix:16)));
    expect(Crc16Zmodem().convert(input),
           CrcValue(16, BigInt.parse('31c3', radix:16)));
  });
  test('Crc24Ble', () {
    expect(Crc24Ble().convert(input),
           CrcValue(24, BigInt.parse('c25a56', radix:16)));
  });
  test('Crc24FlexRayA', () {
    expect(Crc24FlexRayA().convert(input),
           CrcValue(24, BigInt.parse('7979bd', radix:16)));
  });
  test('Crc24FlexRayB', () {
    expect(Crc24FlexRayB().convert(input),
           CrcValue(24, BigInt.parse('1f23b8', radix:16)));
  });
  test('Crc24Interlaken', () {
    expect(Crc24Interlaken().convert(input),
           CrcValue(24, BigInt.parse('b4f3e6', radix:16)));
  });
  test('Crc24LteA', () {
    expect(Crc24LteA().convert(input),
           CrcValue(24, BigInt.parse('cde703', radix:16)));
  });
  test('Crc24LteB', () {
    expect(Crc24LteB().convert(input),
           CrcValue(24, BigInt.parse('23ef52', radix:16)));
  });
  test('Crc24OpenPgp', () {
    expect(Crc24OpenPgp().convert(input),
           CrcValue(24, BigInt.parse('21cf02', radix:16)));
    expect(Crc24().convert(input),
           CrcValue(24, BigInt.parse('21cf02', radix:16)));
  });
  test('Crc24Os9', () {
    expect(Crc24Os9().convert(input),
           CrcValue(24, BigInt.parse('200fa5', radix:16)));
  });
  test('Crc32Aixm', () {
    expect(Crc32Aixm().convert(input),
           CrcValue(32, BigInt.parse('3010bf7f', radix:16)));
    expect(Crc32Q().convert(input),
           CrcValue(32, BigInt.parse('3010bf7f', radix:16)));
  });
  test('Crc32Autosar', () {
    expect(Crc32Autosar().convert(input),
           CrcValue(32, BigInt.parse('1697d06a', radix:16)));
  });
  test('Crc32Base91D', () {
    expect(Crc32Base91D().convert(input),
           CrcValue(32, BigInt.parse('87315576', radix:16)));
    expect(Crc32D().convert(input),
           CrcValue(32, BigInt.parse('87315576', radix:16)));
  });
  test('Crc32Bzip2', () {
    expect(Crc32Bzip2().convert(input),
           CrcValue(32, BigInt.parse('fc891918', radix:16)));
    expect(Crc32Aal5().convert(input),
           CrcValue(32, BigInt.parse('fc891918', radix:16)));
    expect(Crc32DectB().convert(input),
           CrcValue(32, BigInt.parse('fc891918', radix:16)));
    expect(Crc32B().convert(input),
           CrcValue(32, BigInt.parse('fc891918', radix:16)));
  });
  test('Crc32CDRomEdc', () {
    expect(Crc32CDRomEdc().convert(input),
           CrcValue(32, BigInt.parse('6ec2edc4', radix:16)));
  });
  test('Crc32Cksum', () {
    expect(Crc32Cksum().convert(input),
           CrcValue(32, BigInt.parse('765e7680', radix:16)));
    expect(Crc32Posix().convert(input),
           CrcValue(32, BigInt.parse('765e7680', radix:16)));
  });
  test('Crc32Iscsi', () {
    expect(Crc32Iscsi().convert(input),
           CrcValue(32, BigInt.parse('e3069283', radix:16)));
    expect(Crc32Base91C().convert(input),
           CrcValue(32, BigInt.parse('e3069283', radix:16)));
    expect(Crc32Castagnoli().convert(input),
           CrcValue(32, BigInt.parse('e3069283', radix:16)));
    expect(Crc32Interlaken().convert(input),
           CrcValue(32, BigInt.parse('e3069283', radix:16)));
    expect(Crc32C().convert(input),
           CrcValue(32, BigInt.parse('e3069283', radix:16)));
  });
  test('Crc32IsoHdlc', () {
    expect(Crc32IsoHdlc().convert(input),
           CrcValue(32, BigInt.parse('cbf43926', radix:16)));
    expect(Crc32().convert(input),
           CrcValue(32, BigInt.parse('cbf43926', radix:16)));
    expect(Crc32Adccp().convert(input),
           CrcValue(32, BigInt.parse('cbf43926', radix:16)));
    expect(Crc32V42().convert(input),
           CrcValue(32, BigInt.parse('cbf43926', radix:16)));
    expect(Crc32Xz().convert(input),
           CrcValue(32, BigInt.parse('cbf43926', radix:16)));
    expect(Crc32Pkzip().convert(input),
           CrcValue(32, BigInt.parse('cbf43926', radix:16)));
  });
  test('Crc32JamCrc', () {
    expect(Crc32JamCrc().convert(input),
           CrcValue(32, BigInt.parse('340bc6d9', radix:16)));
  });
  test('Crc32Mpeg2', () {
    expect(Crc32Mpeg2().convert(input),
           CrcValue(32, BigInt.parse('376e6e7', radix:16)));
  });
  test('Crc32Xfer', () {
    expect(Crc32Xfer().convert(input),
           CrcValue(32, BigInt.parse('bd0be338', radix:16)));
  });
  test('Crc40Gsm', () {
    expect(Crc40Gsm().convert(input),
           CrcValue(40, BigInt.parse('d4164fc646', radix:16)));
  });
  test('Crc64Ecma182', () {
    expect(Crc64Ecma182().convert(input),
           CrcValue(64, BigInt.parse('6c40df5f0b497347', radix:16)));
    expect(Crc64().convert(input),
           CrcValue(64, BigInt.parse('6c40df5f0b497347', radix:16)));
  });
  test('Crc64GoIso', () {
    expect(Crc64GoIso().convert(input),
           CrcValue(64, BigInt.parse('b90956c775a41001', radix:16)));
  });
  test('Crc64WE', () {
    expect(Crc64WE().convert(input),
           CrcValue(64, BigInt.parse('62ec59e3f1a4f00a', radix:16)));
  });
  test('Crc64Xz', () {
    expect(Crc64Xz().convert(input),
           CrcValue(64, BigInt.parse('995dc9bbdf1939fa', radix:16)));
    expect(Crc64GoEcma().convert(input),
           CrcValue(64, BigInt.parse('995dc9bbdf1939fa', radix:16)));
  });
}
